#lang racket

(define (square x) (* x x))

(display "\n### exercise1.21 ###\n")
(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))
(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)

(display "\n### exercise1.22 ###\n")
(define (prime? n)
    (= n (smallest-divisor n)))

; [15.6Â Time](https://docs.racket-lang.org/reference/time.html)
; (define runtime current-milliseconds)
(define runtime current-inexact-milliseconds)

(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
    (cond ((prime? n) (report-prime (- (runtime) start-time)))))
(define (report-prime elapsed-time)
    (display " *** ")
    (display elapsed-time)
    )
(timed-prime-test 1999)
(timed-prime-test 6700417) 
(timed-prime-test 2147483647) 
; (timed-prime-test 67280421310721) 

(define (search-for-primes n)
    (define (search-for-primes-itr i k)
        (cond ((= k 3) (newline))
              ((prime? i) (timed-prime-test i) (search-for-primes-itr (+ i 2) (+ k 1)))
              (else (search-for-primes-itr (+ i 2) k))
        ))
    (search-for-primes-itr n 0)
)

(search-for-primes 1001)
(search-for-primes 10001)
(search-for-primes 100001)
(search-for-primes 1000001)
(search-for-primes 10000001)
(search-for-primes 100000001)
(search-for-primes 1000000001)
(search-for-primes 10000000001)
(search-for-primes 100000000001)
(search-for-primes 1000000000001)
(search-for-primes 10000000000001)
; (search-for-primes 100000000000001)

(display "\nThe order of growth is O(sqrt(n)), and sqrt(10)~=3.\n")
(display "Therefore the order of growth is increased about 3 times per multiplying by 10.\n")
